#libraries:
library(tidyverse)
library(ggplot2)
library(forecast)
library(ggpubr)
library(mev)
library(ismev)
library(extRemes)
library(lubridate)
library(nleqslv)
library(latex2exp)
library(scales)
library(matlib)
library(evd)
library(hexbin)
library(spatstat)
library(patchwork)
library(mvtnorm)
library(copula)
library(evd)
library(dplyr)
library(geosphere)
library(geoR)
library(sf)
library(sp)
library(scoringRules)
library(fhidata)
library(robustbase)
library(raster)
library(rgdal)
library(purrr)
library(gridExtra)
library(patchwork)
library(geoR)
library(Rfast)
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(rgdal) # package for geospatial analysis
library(ggrepel)
library(fields)
library(colorRamps)
#Stan libraries
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
#Stan libraries
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
locations <- read.table(paste0(path,"/../Data/location.txt"),
col.names = c("location","code","latitude","longitude"))
locations <- locations[c(1:3,5),]
locations
path <- "/home/shomeb/m/marionhr/Spatial-Extreme-Value-Modelling-of-Sea-Level-Data-in-the-Oslo-Fjord/Code"
locations <- read.table(paste0(path,"/../Data/location.txt"),
col.names = c("location","code","latitude","longitude"))
locations <- locations[c(1:3,5),]
locations
find_distances <- function(locations){
#find distances between locations
#input: data frame with longitude and latitude as columns
#output: distance matrix
###################################################################
locations.sf = st_as_sf(locations,coords = c("longitude","latitude"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.locations.sf <- st_transform(locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
distances <- as.matrix(st_distance(transformed.locations.sf))
distances #units m
distances <- distances/(10^3)  #unit km
units(distances) <- NULL
return(distances)
}
locations.sf = st_as_sf(locations,coords = c("longitude","latitude"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.locations.sf <- st_transform(locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
distances <- as.matrix(st_distance(transformed.locations.sf))
distances #units m
distances <- distances/(10^3)  #unit km
units(distances) <- NULL
distances
find_distances(locations)
set.seed(10)
#Generate random data:
dim <- 15  #4, 8, 15,   if choose 8 remember to change s as well
nu <- 1
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(simulated_locations$lat)
simulated_locations$long <- as.numeric(simulated_locations$long)
simulated_locations.sf = st_as_sf(simulated_locations,coords = c("long","lat"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.simulated_locations.sf <- st_transform(simulated_locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
simulated_distances <- as.matrix(st_distance(transformed.simulated_locations.sf))
simulated_distances  # unit m
simulated_distances <- simulated_distances/(10^3)  # unit km
units(simulated_distances) <- NULL
simulated_distances
find_distances(simulated_locations)
sorted_norwegian_coast_data
#find distances between locations
#input: data frame with longitude and latitude as columns
#output: distance matrix
###################################################################
names(locations)
names(simulated_locations)
latitude_name <- if("lat" in names(locations)) "lat" else "latitude"
latitude_name
is.element("lat",names(locations))
latitude_name <- {if(is.element("lat",names(locations))) "lat" else "latitude"}
latitude_name
longitude_name <- {if(is.element("long",names(locations))) "long" else "longitude"}
longitude_name
find_distances <- function(locations){
#find distances between locations
#input: data frame with longitude and latitude as columns
#output: distance matrix
###################################################################
names(locations)
names(simulated_locations)
latitude_name <- {if(is.element("lat",names(locations))) "lat" else "latitude"}
longitude_name <- {if(is.element("long",names(locations))) "long" else "longitude"}
locations.sf = st_as_sf(locations,coords = c(longitude_name,latitude_name),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.locations.sf <- st_transform(locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
distances <- as.matrix(st_distance(transformed.locations.sf))
distances #units m
distances <- distances/(10^3)  #unit km
units(distances) <- NULL
return(distances)
}
#Find distances:
distances <- find_distances(locations)
distances
distances
find_distances(simulated_locations)
set.seed(10)
#Generate random data:
dim <- 15  #4, 8, 15,   if choose 8 remember to change s as well
nu <- 1
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(simulated_locations$lat)
simulated_locations$long <- as.numeric(simulated_locations$long)
simulated_locations.sf = st_as_sf(simulated_locations,coords = c("long","lat"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.simulated_locations.sf <- st_transform(simulated_locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
simulated_distances <- as.matrix(st_distance(transformed.simulated_locations.sf))
simulated_distances  # unit m
simulated_distances <- simulated_distances/(10^3)  # unit km
units(simulated_distances) <- NULL
simulated_distances
#Find distances:
distances <- find_distances(locations)
distances
locations
simulated_locations
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
sorted_norwegian_coast_data
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
simulated_locations
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations
simulated_locations$location <- seq(1,dim)
simulated_locations
simulated_locations$lat <- as.numeric(simulated_locations$lat)
simulated_locations
as.numeric(simulated_locations$lat)
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(simulated_locations$lat)
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
simulated_locations
simulated_locations$lat
as.numeric(simulated_locations$lat)
?as.numeric
as.double(simulated_locations)
as.double(simulated_locations$latitude)
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
simulated_locations
?as.numeric
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations
simulated_locations.sf = st_as_sf(simulated_locations,coords = c("long","lat"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.simulated_locations.sf <- st_transform(simulated_locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
simulated_distances <- as.matrix(st_distance(transformed.simulated_locations.sf))
simulated_distances  # unit m
simulated_distances <- simulated_distances/(10^3)  # unit km
units(simulated_distances) <- NULL
simulated_distances
distances
simulated_locations
?st.as.sf
??st.as.sf
simulated_locations.sf
transformed.simulated_locations.sf
simulated_distances
?as.numeric
as.numeric(simulated_locations$lat)
simulated_locations$lat
