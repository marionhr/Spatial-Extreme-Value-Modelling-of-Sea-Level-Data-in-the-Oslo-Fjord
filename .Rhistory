stan_hist(fit, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/hist.pdf"),
width = 5, height = 5, units = c("in"))
pdf(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/pairs.pdf"))
pairs(fit, pars = c("xi",
"q",
"lns",
"lp__"))
dev.off()
}
load_results_function <- function(station_number){
#load results
data_q_alpha <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
data_lns_beta <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
data_xi <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
data_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
data_original_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
data <- c(data_xi, data_q_alpha, data_lns_beta)
data <- as.data.frame(data)
print("results")
for (name in names(data)){
cat(name, mean(get(name, data)),"\n")
}
#plot
prior_x <- list("xi"=seq(min(data$xi),max(data$xi),0.01),
"q"=seq(min(data$q),max(data$q),0.1),
"lns"=seq(min(data$lns),max(data$lns),0.01))
prior_y <- list("xi"=dnorm(prior_x$xi, 0, 10),
"q"=dnorm(prior_x$q, 100, 50),
"lns"=dnorm(prior_x$lns, 0, 10))
parameter_names <- paste0(names(data),".",station_number)
names(data) <- parameter_names
names(data_original_parameters) <- parameter_names
names(prior_x) <- parameter_names
names(prior_y) <- parameter_names
plots <- map(parameter_names, ~hist_plot_with_priors(data, data_original_parameters, .x, prior_x, prior_y))
return(plots)
}
load_simulated_results_function <- function(station_number){
#load results
data_q_alpha <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
data_lns_beta <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
data_xi <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
data_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
data_original_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
data <- c(data_xi, data_q_alpha, data_lns_beta)
data <- as.data.frame(data)
print("results")
for (name in names(data)){
cat(name, mean(get(name, data)),"\n")
}
#plot
prior_x <- list("xi"=seq(min(data$xi),max(data$xi),0.01),
"q"=seq(min(data$q),max(data$q),0.1),
"lns"=seq(min(data$lns),max(data$lns),0.01))
prior_y <- list("xi"=dnorm(prior_x$xi, 0, 10),
"q"=dnorm(prior_x$q, 100, 50),
"lns"=dnorm(prior_x$lns, 0, 10))
parameter_names <- paste0(names(data),".",station_number)
names(data) <- parameter_names
names(data_original_parameters) <- parameter_names
names(prior_x) <- parameter_names
names(prior_y) <- parameter_names
plots <- map(parameter_names, ~hist_plot_with_priors(data, data_original_parameters, .x, prior_x, prior_y))
return(plots)
}
univariate_simulated_data <- function(station_number){
y <- X_vec[location_indices==station_number]
N <- length(y)
#prepare for STAN:
GEV_dat <- list(N = N,
y = y,
alpha = alpha,
beta = beta,
xi_limits = c(-0.5,0.6))
#fit STAN
fit <- stan(file = paste0(path, "/reparametrized_GEV_univariate.stan"),
data = GEV_dat,
iter = 2*10^4,
control = list(adapt_delta = 0.99,
max_treedepth = 15))
#save results
data_q_alpha <- rstan::extract(fit, pars = c("q"))
data_lns_beta <- rstan::extract(fit, pars = c("lns"))
data_xi <- rstan::extract(fit, pars = c("xi"))
data_parameters <- GEV_dat
data_original_parameters <- list(xi = xi,
q = q_alpha[station_number],
lns = lns_beta[station_number])
write.table(data_q_alpha, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
write.table(data_lns_beta, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
write.table(data_xi, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
saveRDS(data_parameters, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
saveRDS(data_original_parameters, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
#Plots:
stan_trace(fit, inc_warmup = TRUE, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/trace.pdf"),
width = 5, height = 5, units = c("in"))
stan_hist(fit, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/hist.pdf"),
width = 5, height = 5, units = c("in"))
pdf(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/pairs.pdf"))
pairs(fit, pars = c("xi",
"q",
"lns",
"lp__"))
dev.off()
}
univariate_simulated_data <- function(station_number){
#Parameter estimation for the univariate model for the simulated data
#input:
#station_number: the number of the location
#################################################################
y <- X_vec[location_indices==station_number]
N <- length(y)
#prepare for STAN:
GEV_dat <- list(N = N,
y = y,
alpha = alpha,
beta = beta,
xi_limits = c(-0.5,0.6))
#fit STAN
fit <- stan(file = paste0(path, "/reparametrized_GEV_univariate.stan"),
data = GEV_dat,
iter = 2*10^4,
control = list(adapt_delta = 0.99,
max_treedepth = 15))
#save results
data_q_alpha <- rstan::extract(fit, pars = c("q"))
data_lns_beta <- rstan::extract(fit, pars = c("lns"))
data_xi <- rstan::extract(fit, pars = c("xi"))
data_parameters <- GEV_dat
data_original_parameters <- list(xi = xi,
q = q_alpha[station_number],
lns = lns_beta[station_number])
write.table(data_q_alpha, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
write.table(data_lns_beta, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
write.table(data_xi, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
saveRDS(data_parameters, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
saveRDS(data_original_parameters, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
#Plots:
stan_trace(fit, inc_warmup = TRUE, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/trace.pdf"),
width = 5, height = 5, units = c("in"))
stan_hist(fit, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/hist.pdf"),
width = 5, height = 5, units = c("in"))
pdf(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/pairs.pdf"))
pairs(fit, pars = c("xi",
"q",
"lns",
"lp__"))
dev.off()
}
load_simulated_results_function <- function(station_number){
#load the results and make histogram plots for the parameter estimates
#station_number: 1,2,3 or 4
########################################################################
#load results
data_q_alpha <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
data_lns_beta <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
data_xi <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
data_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
data_original_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
data <- c(data_xi, data_q_alpha, data_lns_beta)
data <- as.data.frame(data)
#priors
prior_x <- list("xi"=seq(min(data$xi),max(data$xi),0.01),
"q"=seq(min(data$q),max(data$q),0.1),
"lns"=seq(min(data$lns),max(data$lns),0.01))
prior_y <- list("xi"=dnorm(prior_x$xi, 0, 10),
"q"=dnorm(prior_x$q, 100, 50),
"lns"=dnorm(prior_x$lns, 0, 10))
#parameter names for the plots
parameter_names <- paste0(names(data),".",station_number)
#rename data frames and lists
names(data) <- parameter_names
names(data_original_parameters) <- parameter_names
names(prior_x) <- parameter_names
names(prior_y) <- parameter_names
#plot histograms
plots <- map(parameter_names, ~hist_plot_with_priors(data, data_original_parameters, .x, prior_x, prior_y))
return(plots)
}
univariate_simulated_data(1)
set.seed(10)
#Generate random data used in the simulation study
#dimentions
dim <- 4  #4, 8, 15
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){ #the first four locations are the same as for the real data
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(as.character(simulated_locations$lat))
simulated_locations$long <- as.numeric(as.character(simulated_locations$long))
#distances:
simulated_distances <- find_distances(simulated_locations)
#covariate matrix
make_covariate_matrix(simulated_locations)
#number of data per location
s <- round(runif(dim, 50, 100))
if (dim == 8){
s[5:dim] <- round(runif(dim, 5, 15))
}
#parameters:
xi <- -0.05
alpha <- 0.5
beta <- 0.05
nu <- 1
beta_q <- c(90,9,12,-18,15)
sd_q <- 0.3
range_q <- 100
beta_lns <- c(4.3,0.2,0.1,-0.6,0.2)
sd_lns <- 0.2
range_lns <- 80
#generate data from the multinormal distribution for q and lns:
mean_q <- covariate_matrix %*% beta_q
Sigma_q <- sd_q^2*create_corr_mat(simulated_distances, range_q, nu)
mean_lns <- covariate_matrix %*% beta_lns
Sigma_lns <- sd_lns^2*create_corr_mat(simulated_distances, range_lns, nu)
q_alpha <- mvrnorm(1, mean_q, Sigma_q)
lns_beta <- mvrnorm(1, mean_lns, Sigma_lns)
#generate data from the gev distribution
location_indices <- rep(c(1:dim), s)
reparametrized <- reparametrization(q_alpha, lns_beta, xi, alpha, beta)
X_vec <- rgev(length(location_indices), reparametrized$mu[location_indices], reparametrized$sigma[location_indices], xi)
#Plot locations
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=simulated_locations$long, y=simulated_locations$lat), color="red")+
geom_label_repel(aes(x=simulated_locations$long, y=simulated_locations$lat, label=simulated_locations$location), color="red", max.overlaps = 15) +
guides(fill=FALSE, size=FALSE)+
ggsave(paste0(path, "/../Plots/Extra_Plots/",dim,"_Simulated_Locations.pdf"), width = 5, height = 4, units = c("in"))
univariate_simulated_data(1)
load_simulated_results_function <- function(station_number){
#load the results and make histogram plots for the parameter estimates
#station_number: 1,2,3 or 4
########################################################################
#load results
data_q_alpha <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
data_lns_beta <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
data_xi <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
data_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
data_original_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
data <- c(data_xi, data_q_alpha, data_lns_beta)
data <- as.data.frame(data)
#priors
prior_x <- list("xi"=seq(min(data$xi),max(data$xi),0.01),
"q"=seq(min(data$q),max(data$q),0.1),
"lns"=seq(min(data$lns),max(data$lns),0.01))
prior_y <- list("xi"=dnorm(prior_x$xi, 0, 10),
"q"=dnorm(prior_x$q, 100, 50),
"lns"=dnorm(prior_x$lns, 0, 10))
#parameter names for the plots
parameter_names <- paste0(names(data),".",station_number)
#rename data frames and lists
names(data) <- parameter_names
names(data_original_parameters) <- parameter_names
names(prior_x) <- parameter_names
names(prior_y) <- parameter_names
#plot histograms
plots <- map(parameter_names, ~hist_plot_with_priors(data, data_original_parameters, .x, prior_x, prior_y))
return(plots)
}
plots1 <- load_results_function(1)
plots2 <- load_results_function(2)
plots3 <- load_results_function(3)
plots4 <- load_results_function(4)
plots <- c(plots1,plots2,plots3,plots4)
ggarrange(plotlist=plots[c(1,4,7,10)],ncol=4,nrow=1)+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/hist_with_real_xi.pdf"),
width = 10, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[c(2,5,8,11)],ncol=4,nrow=1)+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/hist_with_real_q.pdf"),
width = 10, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[c(3,6,9,12)],ncol=4,nrow=1)+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/hist_with_real_lns.pdf"),
width = 10, height = 8*1/4, units = c("in"))
set.seed(10)
#Find parameter estimates for the simulated data using the univariate GEV model and STAN
#Data
univariate_simulated_data <- function(station_number){
#Parameter estimation for the univariate model for the simulated data
#input:
#station_number: the number of the location
#################################################################
y <- X_vec[location_indices==station_number]
N <- length(y)
#prepare for STAN:
GEV_dat <- list(N = N,
y = y,
alpha = alpha,
beta = beta,
xi_limits = c(-0.5,0.6))
#fit STAN
fit <- stan(file = paste0(path, "/reparametrized_GEV_univariate.stan"),
data = GEV_dat,
iter = 2*10^4,
control = list(adapt_delta = 0.99,
max_treedepth = 15))
#save results
data_q_alpha <- rstan::extract(fit, pars = c("q"))
data_lns_beta <- rstan::extract(fit, pars = c("lns"))
data_xi <- rstan::extract(fit, pars = c("xi"))
data_parameters <- GEV_dat
data_original_parameters <- list(xi = xi,
q = q_alpha[station_number],
lns = lns_beta[station_number])
write.table(data_q_alpha, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
write.table(data_lns_beta, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
write.table(data_xi, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
saveRDS(data_parameters, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
saveRDS(data_original_parameters, file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
#Plots:
stan_trace(fit, inc_warmup = TRUE, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/trace.pdf"),
width = 5, height = 5, units = c("in"))
stan_hist(fit, nrow=3,
pars = c("xi",
"q",
"lns"))+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/hist.pdf"),
width = 5, height = 5, units = c("in"))
pdf(paste0(path, "/../Plots/Simulated_Data_univariate/Station_",station_number,"/pairs.pdf"))
pairs(fit, pars = c("xi",
"q",
"lns",
"lp__"))
dev.off()
}
load_simulated_results_function <- function(station_number){
#load the results and make histogram plots for the parameter estimates
#station_number: 1,2,3 or 4
########################################################################
#load results
data_q_alpha <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_q_alpha.xml"))
data_lns_beta <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_lns_beta.xml"))
data_xi <- read.table(file=paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_xi.xml"))
data_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_parameters.xml"))
data_original_parameters <- readRDS(paste0(path, "/../Results/Simulated_Data_univariate/Station_",station_number,"/data_original_parameters.xml"))
data <- c(data_xi, data_q_alpha, data_lns_beta)
data <- as.data.frame(data)
#priors
prior_x <- list("xi"=seq(min(data$xi),max(data$xi),0.01),
"q"=seq(min(data$q),max(data$q),0.1),
"lns"=seq(min(data$lns),max(data$lns),0.01))
prior_y <- list("xi"=dnorm(prior_x$xi, 0, 10),
"q"=dnorm(prior_x$q, 100, 50),
"lns"=dnorm(prior_x$lns, 0, 10))
#parameter names for the plots
parameter_names <- paste0(names(data),".",station_number)
#rename data frames and lists
names(data) <- parameter_names
names(data_original_parameters) <- parameter_names
names(prior_x) <- parameter_names
names(prior_y) <- parameter_names
#plot histograms
plots <- map(parameter_names, ~hist_plot_with_priors(data, data_original_parameters, .x, prior_x, prior_y))
return(plots)
}
univariate_simulated_data(1)
plots1 <- load_results_function(1)
plots <- c(plots1,plots2,plots3,plots4)
ggarrange(plotlist=plots[c(1,4,7,10)],ncol=4,nrow=1)+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/hist_with_real_xi.pdf"),
width = 10, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[c(2,5,8,11)],ncol=4,nrow=1)+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/hist_with_real_q.pdf"),
width = 10, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[c(3,6,9,12)],ncol=4,nrow=1)+
ggsave(paste0(path, "/../Plots/Simulated_Data_univariate/hist_with_real_lns.pdf"),
width = 10, height = 8*1/4, units = c("in"))
View(hist_plot_no_real_value_with_priors)
#load results
results <- find_data(save_in_repository)
data <- results$data
data_parameters <- results$parameters
data_original_parameters <- readRDS(paste0(path, "/../Results/",save_in_repository,"/data_original_parameters.xml"))
#prepare data and parameters:
parameter_names <- names(data[(data_parameters$dim*2+1):ncol(data)])
parameter_set <-  setNames(c(data_original_parameters$xi,
data_original_parameters$beta_q,
data_original_parameters$sd_q,
data_original_parameters$range_q,
data_original_parameters$beta_lns,
data_original_parameters$sd_lns,
data_original_parameters$range_lns),
parameter_names)
data_set <- data[(data_parameters$dim*2+1):ncol(data)]
#priors:
x_values_prior <- find_x_values_prior(data)
y_values_prior <- mapply(prior_plot_func, parameter_names, MoreArgs = list(x_values_prior))
if (different_prior==TRUE){
y_values_prior$range_q <- dgamma(get("range_q",x_values_prior),1.5,1/40)
y_values_prior$range_lns <- dgamma(get("range_lns",x_values_prior),1.5,1/40)
}
x_values_prior$xi <- data_parameters$xi_limits[1]+(data_parameters$xi_limits[2]-data_parameters$xi_limits[1])*exp(x_values_prior$xi)/(1+exp(x_values_prior$xi))
#plot histograms of the parameters
plots <- map(parameter_names, ~hist_plot_with_priors(data_set, as.data.frame(t(parameter_set)), .x, x_values_prior, y_values_prior))
ggarrange(plotlist=plots[1], ncol=1, nrow = 1)+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_with_real_xi.pdf"),
width = 10/4, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[2:8], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_with_real_q.pdf"),
width = 10, height = 8*2/4, units = c("in"))
ggarrange(plotlist=plots[9:15], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_with_real_lns.pdf"),
width = 10, height = 8*2/4, units = c("in"))
#plot histograms of q
parameter_names <- names(data[1:(data_parameters$dim)])
data_set <- data[1:(data_parameters$dim)]
parameter_set <- as.data.frame(data_original_parameters$q_alpha)
names(parameter_set) <- parameter_names
plots <- map(parameter_names, ~hist_plot(data_set, parameter_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_parameters_q.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#plot histograms of lns
parameter_names <- names(data[(data_parameters$dim+1):(data_parameters$dim*2)])
data_set <- data[(data_parameters$dim+1):(data_parameters$dim*2)]
parameter_set <- as.data.frame(data_original_parameters$lns_beta)
names(parameter_set) <- parameter_names
plots <- map(parameter_names, ~hist_plot(data_set, parameter_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_parameters_lns.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#if choose different prior:
different_prior <- FALSE   #remember to also change the prior in the STAN file: reparametrized_GEV.stan
save_in_repository <- paste0("Simulated_Data_",dim,"_locations")
if (different_prior==TRUE){
save_in_repository <- paste0("Simulated_Data_",dim,"_locations_different_prior")
}
#load results
results <- find_data(save_in_repository)
data <- results$data
data_parameters <- results$parameters
data_original_parameters <- readRDS(paste0(path, "/../Results/",save_in_repository,"/data_original_parameters.xml"))
#prepare data and parameters:
parameter_names <- names(data[(data_parameters$dim*2+1):ncol(data)])
parameter_set <-  setNames(c(data_original_parameters$xi,
data_original_parameters$beta_q,
data_original_parameters$sd_q,
data_original_parameters$range_q,
data_original_parameters$beta_lns,
data_original_parameters$sd_lns,
data_original_parameters$range_lns),
parameter_names)
data_set <- data[(data_parameters$dim*2+1):ncol(data)]
#priors:
x_values_prior <- find_x_values_prior(data)
y_values_prior <- mapply(prior_plot_func, parameter_names, MoreArgs = list(x_values_prior))
if (different_prior==TRUE){
y_values_prior$range_q <- dgamma(get("range_q",x_values_prior),1.5,1/40)
y_values_prior$range_lns <- dgamma(get("range_lns",x_values_prior),1.5,1/40)
}
x_values_prior$xi <- data_parameters$xi_limits[1]+(data_parameters$xi_limits[2]-data_parameters$xi_limits[1])*exp(x_values_prior$xi)/(1+exp(x_values_prior$xi))
#plot histograms of the parameters
plots <- map(parameter_names, ~hist_plot_with_priors(data_set, as.data.frame(t(parameter_set)), .x, x_values_prior, y_values_prior))
ggarrange(plotlist=plots[1], ncol=1, nrow = 1)+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_with_real_xi.pdf"),
width = 10/4, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[2:8], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_with_real_q.pdf"),
width = 10, height = 8*2/4, units = c("in"))
ggarrange(plotlist=plots[9:15], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_with_real_lns.pdf"),
width = 10, height = 8*2/4, units = c("in"))
#plot histograms of q
parameter_names <- names(data[1:(data_parameters$dim)])
data_set <- data[1:(data_parameters$dim)]
parameter_set <- as.data.frame(data_original_parameters$q_alpha)
names(parameter_set) <- parameter_names
plots <- map(parameter_names, ~hist_plot(data_set, parameter_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_parameters_q.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#plot histograms of lns
parameter_names <- names(data[(data_parameters$dim+1):(data_parameters$dim*2)])
data_set <- data[(data_parameters$dim+1):(data_parameters$dim*2)]
parameter_set <- as.data.frame(data_original_parameters$lns_beta)
names(parameter_set) <- parameter_names
plots <- map(parameter_names, ~hist_plot(data_set, parameter_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/",save_in_repository,"/hist_parameters_lns.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
