library(Rfast)
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(rgdal) # package for geospatial analysis
library(ggrepel)
library(fields)
library(colorRamps)
#Stan libraries
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
#Stan libraries
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
locations <- read.table(paste0(path,"/../Data/location.txt"),
col.names = c("location","code","latitude","longitude"))
locations <- locations[c(1:3,5),]
locations
path <- "/home/shomeb/m/marionhr/Spatial-Extreme-Value-Modelling-of-Sea-Level-Data-in-the-Oslo-Fjord/Code"
locations <- read.table(paste0(path,"/../Data/location.txt"),
col.names = c("location","code","latitude","longitude"))
locations <- locations[c(1:3,5),]
locations
find_distances <- function(locations){
#find distances between locations
#input: data frame with longitude and latitude as columns
#output: distance matrix
###################################################################
locations.sf = st_as_sf(locations,coords = c("longitude","latitude"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.locations.sf <- st_transform(locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
distances <- as.matrix(st_distance(transformed.locations.sf))
distances #units m
distances <- distances/(10^3)  #unit km
units(distances) <- NULL
return(distances)
}
locations.sf = st_as_sf(locations,coords = c("longitude","latitude"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.locations.sf <- st_transform(locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
distances <- as.matrix(st_distance(transformed.locations.sf))
distances #units m
distances <- distances/(10^3)  #unit km
units(distances) <- NULL
distances
find_distances(locations)
set.seed(10)
#Generate random data:
dim <- 15  #4, 8, 15,   if choose 8 remember to change s as well
nu <- 1
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(simulated_locations$lat)
simulated_locations$long <- as.numeric(simulated_locations$long)
simulated_locations.sf = st_as_sf(simulated_locations,coords = c("long","lat"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.simulated_locations.sf <- st_transform(simulated_locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
simulated_distances <- as.matrix(st_distance(transformed.simulated_locations.sf))
simulated_distances  # unit m
simulated_distances <- simulated_distances/(10^3)  # unit km
units(simulated_distances) <- NULL
simulated_distances
find_distances(simulated_locations)
sorted_norwegian_coast_data
#find distances between locations
#input: data frame with longitude and latitude as columns
#output: distance matrix
###################################################################
names(locations)
names(simulated_locations)
latitude_name <- if("lat" in names(locations)) "lat" else "latitude"
latitude_name
is.element("lat",names(locations))
latitude_name <- {if(is.element("lat",names(locations))) "lat" else "latitude"}
latitude_name
longitude_name <- {if(is.element("long",names(locations))) "long" else "longitude"}
longitude_name
find_distances <- function(locations){
#find distances between locations
#input: data frame with longitude and latitude as columns
#output: distance matrix
###################################################################
names(locations)
names(simulated_locations)
latitude_name <- {if(is.element("lat",names(locations))) "lat" else "latitude"}
longitude_name <- {if(is.element("long",names(locations))) "long" else "longitude"}
locations.sf = st_as_sf(locations,coords = c(longitude_name,latitude_name),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.locations.sf <- st_transform(locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
distances <- as.matrix(st_distance(transformed.locations.sf))
distances #units m
distances <- distances/(10^3)  #unit km
units(distances) <- NULL
return(distances)
}
#Find distances:
distances <- find_distances(locations)
distances
distances
find_distances(simulated_locations)
set.seed(10)
#Generate random data:
dim <- 15  #4, 8, 15,   if choose 8 remember to change s as well
nu <- 1
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(simulated_locations$lat)
simulated_locations$long <- as.numeric(simulated_locations$long)
simulated_locations.sf = st_as_sf(simulated_locations,coords = c("long","lat"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.simulated_locations.sf <- st_transform(simulated_locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
simulated_distances <- as.matrix(st_distance(transformed.simulated_locations.sf))
simulated_distances  # unit m
simulated_distances <- simulated_distances/(10^3)  # unit km
units(simulated_distances) <- NULL
simulated_distances
#Find distances:
distances <- find_distances(locations)
distances
locations
simulated_locations
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
sorted_norwegian_coast_data
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
simulated_locations
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations
simulated_locations$location <- seq(1,dim)
simulated_locations
simulated_locations$lat <- as.numeric(simulated_locations$lat)
simulated_locations
as.numeric(simulated_locations$lat)
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations$lat <- as.numeric(simulated_locations$lat)
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
simulated_locations
simulated_locations$lat
as.numeric(simulated_locations$lat)
?as.numeric
as.double(simulated_locations)
as.double(simulated_locations$latitude)
#locations:
sorted_norwegian_coast_data <- read.table(file=paste0(path,"/../Data/sorted_norwegian_south_coast_data.txt"))
if (dim>4){
simulated_locations <- as.data.frame(rbind(as.matrix(locations[,c(3,4,2,1)]),as.matrix(sorted_norwegian_coast_data[1:(dim-4),])))
} else {
simulated_locations <- locations[,c(3,4,2,1)]
}
simulated_locations
?as.numeric
names(simulated_locations) <- names(sorted_norwegian_coast_data)
simulated_locations$location <- seq(1,dim)
simulated_locations
simulated_locations.sf = st_as_sf(simulated_locations,coords = c("long","lat"),
crs="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+towgs84=0,0,0")
transformed.simulated_locations.sf <- st_transform(simulated_locations.sf, crs = CRS("+proj=utm +zone=32 +datum=WGS84"))
simulated_distances <- as.matrix(st_distance(transformed.simulated_locations.sf))
simulated_distances  # unit m
simulated_distances <- simulated_distances/(10^3)  # unit km
units(simulated_distances) <- NULL
simulated_distances
distances
simulated_locations
?st.as.sf
??st.as.sf
simulated_locations.sf
transformed.simulated_locations.sf
simulated_distances
?as.numeric
as.numeric(simulated_locations$lat)
simulated_locations$lat
install.packages("rlang")
install.packages("devtools")
#fhidata
#install.packages("devtools")
require(devtools)
install_version("fhidata", version = "2019.8.27", repos = "http://cran.us.r-project.org")
#load results
results <- find_data("Real_Data")
data <- results$data
data_parameters <- results$parameters
print("results")
for (name in names(data)){
cat(name, mean(get(name, data)),"\n")
}
#Plot
#parameters:
data_set <- data[c((data_parameters$dim*2+1):(data_parameters$dim*2+5+2*data_parameters$ncovariates))]
data_set <- as.data.frame(data_set)
parameter_names <- names(data_set)
x_values_prior <- find_x_values_prior(data)
y_values_prior <- mapply(prior_plot_func, parameter_names, MoreArgs = list(x_values_prior))
x_values_prior$xi <- data_parameters$xi_limits[1]+(data_parameters$xi_limits[2]-data_parameters$xi_limits[1])*exp(x_values_prior$xi)/(1+exp(x_values_prior$xi))
plots <- map(parameter_names, ~histogram_of_results(data_set, .x, prior_x=x_values_prior, prior_y=y_values_prior))
ggarrange(plotlist=plots[1], ncol=1, nrow = 1)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_xi.pdf"),
width = 10*1/4, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[2:8], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_q.pdf"),
width = 10, height = 8*2/4, units = c("in"))
ggarrange(plotlist=plots[9:15], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_lns.pdf"),
width = 10, height = 8*2/4, units = c("in"))
#q
data_set <- data[c(1:data_parameters$dim)]
data_set <- as.data.frame(data_set)
names(data_set) <- paste0("q.",locations$location)
plots <- map(names(data_set), ~histogram_of_results(data_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/Real_Data/hist_q.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#lns
data_set <- data[c((1+data_parameters$dim):(data_parameters$dim*2))]
data_set <- as.data.frame(data_set)
names(data_set) <- paste0("lns.",locations$location)
plots <- map(names(data_set), ~histogram_of_results(data_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/Real_Data/hist_lns.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#maps:
median_q <- colMedians(as.matrix(data_q_alpha))
median_lns <- colMedians(as.matrix(data_lns_beta))
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=locations$long, y=locations$lat, colour=median_q, size = 0.7))+
scale_size(range = c(2.5,3.5)) +
scale_color_gradientn(colours=colorRamps::blue2green(10), limits=c(70,120))+
guides(fill=FALSE, size=FALSE)+
labs(colour="q")+
ggsave(paste0(path, "/../Plots/Real_Data/q.pdf"),
width = 5, height = 5, units = c("in"))
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=locations$long, y=locations$lat, colour=median_lns, size = 0.7))+
scale_size(range = c(2.5,3.5)) +
scale_color_gradientn(colours=colorRamps::blue2green(10), limits=c(3.5,5.0))+
guides(fill=FALSE, size=FALSE)+
labs(colour="lns")+
ggsave(paste0(path, "/../Plots/Real_Data/lns.pdf"),
width = 5, height = 5, units = c("in"))
library(tidyverse)
library(ggplot2)
library(forecast)
library(ggpubr)
library(mev)
library(ismev)
library(extRemes)
library(lubridate)
library(nleqslv)
library(latex2exp)
library(scales)
library(matlib)
library(evd)
library(hexbin)
library(spatstat)
library(patchwork)
library(mvtnorm)
library(copula)
library(evd)
library(dplyr)
library(geosphere)
library(geoR)
library(sf)
library(sp)
library(scoringRules)
library(fhidata)
library(robustbase)
library(raster)
library(rgdal)
library(purrr)
library(gridExtra)
library(patchwork)
library(geoR)
library(Rfast)
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(rgdal) # package for geospatial analysis
library(ggrepel)
library(fields)
library(colorRamps)
#Stan libraries
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#load results
results <- find_data("Real_Data")
data <- results$data
data_parameters <- results$parameters
print("results")
for (name in names(data)){
cat(name, mean(get(name, data)),"\n")
}
#Plot
#parameters:
data_set <- data[c((data_parameters$dim*2+1):(data_parameters$dim*2+5+2*data_parameters$ncovariates))]
data_set <- as.data.frame(data_set)
parameter_names <- names(data_set)
x_values_prior <- find_x_values_prior(data)
y_values_prior <- mapply(prior_plot_func, parameter_names, MoreArgs = list(x_values_prior))
x_values_prior$xi <- data_parameters$xi_limits[1]+(data_parameters$xi_limits[2]-data_parameters$xi_limits[1])*exp(x_values_prior$xi)/(1+exp(x_values_prior$xi))
plots <- map(parameter_names, ~histogram_of_results(data_set, .x, prior_x=x_values_prior, prior_y=y_values_prior))
ggarrange(plotlist=plots[1], ncol=1, nrow = 1)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_xi.pdf"),
width = 10*1/4, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[2:8], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_q.pdf"),
width = 10, height = 8*2/4, units = c("in"))
ggarrange(plotlist=plots[9:15], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_lns.pdf"),
width = 10, height = 8*2/4, units = c("in"))
#q
data_set <- data[c(1:data_parameters$dim)]
data_set <- as.data.frame(data_set)
names(data_set) <- paste0("q.",locations$location)
plots <- map(names(data_set), ~histogram_of_results(data_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/Real_Data/hist_q.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#lns
data_set <- data[c((1+data_parameters$dim):(data_parameters$dim*2))]
data_set <- as.data.frame(data_set)
names(data_set) <- paste0("lns.",locations$location)
plots <- map(names(data_set), ~histogram_of_results(data_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/Real_Data/hist_lns.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#maps:
median_q <- colMedians(as.matrix(data_q_alpha))
median_lns <- colMedians(as.matrix(data_lns_beta))
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=locations$long, y=locations$lat, colour=median_q, size = 0.7))+
scale_size(range = c(2.5,3.5)) +
scale_color_gradientn(colours=colorRamps::blue2green(10), limits=c(70,120))+
guides(fill=FALSE, size=FALSE)+
labs(colour="q")+
ggsave(paste0(path, "/../Plots/Real_Data/q.pdf"),
width = 5, height = 5, units = c("in"))
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=locations$long, y=locations$lat, colour=median_lns, size = 0.7))+
scale_size(range = c(2.5,3.5)) +
scale_color_gradientn(colours=colorRamps::blue2green(10), limits=c(3.5,5.0))+
guides(fill=FALSE, size=FALSE)+
labs(colour="lns")+
ggsave(paste0(path, "/../Plots/Real_Data/lns.pdf"),
width = 5, height = 5, units = c("in"))
#load results
results <- find_data("Real_Data")
source('~/Spatial-Extreme-Value-Modelling-of-Sea-Level-Data-in-the-Oslo-Fjord/Code/functions.R', echo=TRUE)
source('~/Spatial-Extreme-Value-Modelling-of-Sea-Level-Data-in-the-Oslo-Fjord/Code/data.R', echo=TRUE)
#load results
results <- find_data("Real_Data")
data <- results$data
data_parameters <- results$parameters
print("results")
for (name in names(data)){
cat(name, mean(get(name, data)),"\n")
}
#parameters:
data_set <- data[c((data_parameters$dim*2+1):(data_parameters$dim*2+5+2*data_parameters$ncovariates))]
data_set <- as.data.frame(data_set)
parameter_names <- names(data_set)
x_values_prior <- find_x_values_prior(data)
y_values_prior <- mapply(prior_plot_func, parameter_names, MoreArgs = list(x_values_prior))
x_values_prior$xi <- data_parameters$xi_limits[1]+(data_parameters$xi_limits[2]-data_parameters$xi_limits[1])*exp(x_values_prior$xi)/(1+exp(x_values_prior$xi))
plots <- map(parameter_names, ~histogram_of_results(data_set, .x, prior_x=x_values_prior, prior_y=y_values_prior))
ggarrange(plotlist=plots[1], ncol=1, nrow = 1)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_xi.pdf"),
width = 10*1/4, height = 8*1/4, units = c("in"))
ggarrange(plotlist=plots[2:8], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_q.pdf"),
width = 10, height = 8*2/4, units = c("in"))
ggarrange(plotlist=plots[9:15], ncol=4, nrow = 2)+
ggsave(paste0(path, "/../Plots/Real_Data/hist_with_real_lns.pdf"),
width = 10, height = 8*2/4, units = c("in"))
#q
data_set <- data[c(1:data_parameters$dim)]
data_set <- as.data.frame(data_set)
names(data_set) <- paste0("q.",locations$location)
plots <- map(names(data_set), ~histogram_of_results(data_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/Real_Data/hist_q.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#lns
data_set <- data[c((1+data_parameters$dim):(data_parameters$dim*2))]
data_set <- as.data.frame(data_set)
names(data_set) <- paste0("lns.",locations$location)
plots <- map(names(data_set), ~histogram_of_results(data_set, .x))
ggarrange(plotlist=plots, ncol=4, nrow = ceiling(length(plots)/4))+
ggsave(paste0(path, "/../Plots/Real_Data/hist_lns.pdf"),
width = 10, height = 8*ceiling(length(plots)/4)/4, units = c("in"))
#maps:
median_q <- colMedians(as.matrix(data_q_alpha))
median_lns <- colMedians(as.matrix(data_lns_beta))
data[1:4,]
data[,1:4]
#maps:
median_q <- colMedians(as.matrix(data[,1:4]))
median_lns <- colMedians(as.matrix(data[,5:8]))
data[,5:8]
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=locations$long, y=locations$lat, colour=median_q, size = 0.7))+
scale_size(range = c(2.5,3.5)) +
scale_color_gradientn(colours=colorRamps::blue2green(10), limits=c(70,120))+
guides(fill=FALSE, size=FALSE)+
labs(colour="q")+
ggsave(paste0(path, "/../Plots/Real_Data/q.pdf"),
width = 5, height = 5, units = c("in"))
ggplot() +
geom_polygon(data = fhidata::norway_map_counties, mapping = aes(x = long, y = lat, group = group, fill = hole), color = "black")+
scale_fill_manual(values = c("white"))+
theme_void()+
coord_quickmap() +
coord_cartesian(xlim=c(9,12),ylim=c(58.8,60)) +
geom_point(aes(x=locations$long, y=locations$lat, colour=median_lns, size = 0.7))+
scale_size(range = c(2.5,3.5)) +
scale_color_gradientn(colours=colorRamps::blue2green(10), limits=c(3.5,5.0))+
guides(fill=FALSE, size=FALSE)+
labs(colour="lns")+
ggsave(paste0(path, "/../Plots/Real_Data/lns.pdf"),
width = 5, height = 5, units = c("in"))
load_real_results_function <- function(location_name){
#load the results and make histogram plots for the parameter estimates
#location_name: Helgeroa, Oscarsborg, Oslo or Viker
########################################################################
#load results
data_q_alpha <- read.table(file=paste0(path, "/../Results/Univariate_real_Data_",location_name,"/data_q_alpha.xml"))
data_lns_beta <- read.table(file=paste0(path, "/../Results/Univariate_real_Data_",location_name,"/data_lns_beta.xml"))
data_xi <- read.table(file=paste0(path, "/../Results/Univariate_real_Data_",location_name,"/data_xi.xml"))
data_parameters <- readRDS(paste0(path, "/../Results/Univariate_real_Data_",location_name,"/data_parameters.xml"))
data <- c(data_q_alpha, data_lns_beta, data_xi)
data <- as.data.frame(data)
#parameter names for the plots
parameter_names <- paste0(location_name,".",names(data))
#the priors:
prior_x <- list("q"=seq(min(data$q),max(data$q),0.1),
"lns"=seq(min(data$lns),max(data$lns),0.01),
"xi"=seq(-10,10,0.001))
prior_y <- list("q"=dnorm(prior_x$q, 100, 50),
"lns"=dnorm(prior_x$lns, 0, 10),
"xi"=dnorm(prior_x$xi, 0, 10))
prior_x$xi <- data_parameters$xi_limits[1]+(data_parameters$xi_limits[2]-data_parameters$xi_limits[1])*exp(prior_x$xi)/(1+exp(prior_x$xi))
#rename the data frames and list
names(data) <- parameter_names
names(prior_x) <- parameter_names
names(prior_y) <- parameter_names
#plot histograms
plots <- map(parameter_names, ~histogram_of_results(data, .x, prior_x=prior_x, prior_y=prior_y))
ggarrange(plotlist=plots)+
ggsave(paste0(path, "/../Plots/Univariate_real_Data_",location_name,"/hist_with_real.pdf"),
width = 5, height = 4, units = c("in"))
return(plots)
}
plots_Helgeroa <- load_real_results_function("Helgeroa")
